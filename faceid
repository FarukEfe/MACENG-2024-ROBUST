# 实验环境：python 3.6 + opencv-python 3.4.14.51

import cv2
import numpy as np
import os
import shutil
import threading
import tkinter as tk
from PIL import Image, ImageTk

# 初始化变量和配置文件
id_dict = {}  # 字典里存的是id——name键值对
Total_face_num = 0  # 已经被识别有用户名的人脸个数

# 读取 config 文件内容到字典中
def init():
    global Total_face_num
    try:
        with open('config.txt', 'r') as f:
            Total_face_num = int(f.readline().strip())
            for _ in range(Total_face_num):
                line = f.readline().strip()
                id_name = line.split(' ')
                id_dict[int(id_name[0])] = id_name[1]
    except FileNotFoundError:
        print("配置文件 config.txt 未找到，请确保文件存在")
    except ValueError:
        print("配置文件格式错误，请检查文件内容")

init()

# 加载OpenCV人脸检测分类器Haar
face_cascade = cv2.CascadeClassifier("haarcascade_frontalface_default.xml")

# 准备好识别方法LBPH方法
recognizer = cv2.face.LBPHFaceRecognizer_create()

# 打开标号为0的摄像头
camera = cv2.VideoCapture(0)
if not camera.isOpened():
    print("无法访问摄像头，请检查设备连接")
    exit()

success, img = camera.read()  # 从摄像头读取照片
W_size = 0.1 * camera.get(3)
H_size = 0.1 * camera.get(4)

system_state_lock = 0  # 标志系统状态的量 0表示无子线程在运行 1表示正在刷脸 2表示正在录入新面孔。

# 采集新人脸图像
def Get_new_face():
    print("正在从摄像头录入新人脸信息 \n")

    filepath = "data"
    if not os.path.exists(filepath):
        os.mkdir(filepath)
    else:
        shutil.rmtree(filepath)
        os.mkdir(filepath)

    sample_num = 0  # 已经获得的样本数

    while True:
        global success, img
        success, img = camera.read()
        if success:
            gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
        else:
            break

        face_detector = face_cascade
        faces = face_detector.detectMultiScale(gray, 1.3, 5)

        for (x, y, w, h) in faces:
            cv2.rectangle(img, (x, y), (x + w, y + h), (255, 0, 0))
            sample_num += 1
            T = Total_face_num
            cv2.imwrite(f"./data/User.{T}.{sample_num}.jpg", gray[y:y + h, x:x + w])

        pictur_num = 30  # 需要采集的样本数量

        cv2.waitKey(1)
        if sample_num > pictur_num:
            break
        else:
            l = int(sample_num / pictur_num * 50)
            r = int((pictur_num - sample_num) / pictur_num * 50)
            print("\r" + "%{:.1f}".format(sample_num / pictur_num * 100) + "=" * l + "->" + "_" * r, end="")
            var.set("%{:.1f}".format(sample_num / pictur_num * 100))
            window.update()

# 训练新采集到的人脸
def Train_new_face():
    print("\n正在训练")
    path = 'data'
    recog = cv2.face.LBPHFaceRecognizer_create()

    faces, ids = get_images_and_labels(path)
    print('本次用于训练的识别码为:', ids)

    recog.train(faces, np.array(ids))
    yml = f"{Total_face_num}.yml"
    recog.save(yml)

# 获取训练图片和标签
def get_images_and_labels(path):
    image_paths = [os.path.join(path, f) for f in os.listdir(path)]
    face_samples = []
    ids = []

    for image_path in image_paths:
        img = Image.open(image_path).convert('L')
        img_np = np.array(img, 'uint8')

        if os.path.split(image_path)[-1].split(".")[-1] != 'jpg':
            continue

        id = int(os.path.split(image_path)[-1].split(".")[1])
        faces = face_cascade.detectMultiScale(img_np)

        for (x, y, w, h) in faces:
            face_samples.append(img_np[y:y + h, x:x + w])
            ids.append(id)
    return face_samples, ids

# 更新配置文件
def write_config():
    print("新人脸训练结束")
    with open('config.txt', "a") as f:
        T = Total_face_num
        f.write(f"{T} User{T}\n")
    id_dict[T] = "User" + str(T)

    with open('config.txt', 'r+') as f:
        flist = f.readlines()
        flist[0] = str(int(flist[0]) + 1) + " \n"

    with open('config.txt', 'w') as f:
        f.writelines(flist)

# 设置 GUI 界面
window = tk.Tk()
window.title('Face Recognition')
window.geometry('1000x500')

var = tk.StringVar()
l = tk.Label(window, textvariable=var, bg='green', fg='white', font=('Arial', 12), width=50, height=4)
l.pack()

button_a = tk.Button(window, text='开始刷脸', font=('Arial', 12), width=10, height=2, command=Get_new_face)
button_a.place(x=800, y=120)

button_b = tk.Button(window, text='录入人脸', font=('Arial', 12), width=10, height=2, command=Train_new_face)
button_b.place(x=800, y=220)

button_c = tk.Button(window, text='退出', font=('Arial', 12), width=10, height=2, command=window.quit)
button_c.place(x=800, y=320)

panel = tk.Label(window, width=500, height=350)
panel.place(x=10, y=100)
window.config(cursor="arrow")

# 摄像头视频流显示
def video_loop():
    global success, img
    if success:
        cv2.waitKey(1)
        cv2image = cv2.cvtColor(img, cv2.COLOR_BGR2RGBA)
        current_image = Image.fromarray(cv2image)
        imgtk = ImageTk.PhotoImage(image=current_image)
        panel.imgtk = imgtk
        panel.config(image=imgtk)
        window.after(1, video_loop)

video_loop()
window.mainloop()
